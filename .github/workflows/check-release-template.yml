name: Check Releases Template

on:
  workflow_call:
    inputs:
      item-id:
        required: true
        type: string
      changelog-url:
        default: "null"
        required: false
        type: string
      github-org:
        default: "null"
        required: false
        type: string
      github-repo:
        default: "null"
        required: false
        type: string
      tag:
        required: false
        default: false
        type: boolean
      latestRelease:
        required: false
        default: false
        type: boolean
      allReleases:
        required: false
        default: false
        type: boolean
      allReleasesInclude:
        default: "null"
        required: false
        type: string
      allReleasesExclude:
        default: "null"
        required: false
        type: string
      assetsMatch:
        default: "null"
        required: false
        type: string

jobs:
  fetch-release:
    runs-on: ubuntu-latest
    env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      output1: ${{ steps.fetch-release-step.outputs.releaseVersion }}
      output2: ${{ steps.fetch-release-step.outputs.releaseDate }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14

    - name: Install dependencies
      run: npm install
      working-directory: scripts

    - name: Fetch release
      id: fetch-release-step
      working-directory: scripts
      run: |
        OUTPUT=$(node fetch-latest-release.js ${{ inputs.item-id }} ${{ inputs.changelog-url }} ${{ inputs.github-org }} ${{ inputs.github-repo }} $GITHUB_TOKEN ${{ inputs.tag }} ${{ inputs.latestRelease }} ${{ inputs.allReleases }} ${{ inputs.allReleasesInclude }} ${{ inputs.allReleasesExclude }}) 
        echo $OUTPUT
        while IFS= read -r line; do
            if [[ $line == releaseVersion=* ]]; then
                echo $line >> "$GITHUB_OUTPUT"
            elif [[ $line == releaseDate=* ]]; then
                echo $line >> "$GITHUB_OUTPUT"
            fi
        done <<< "$OUTPUT"
  commit-release:
    runs-on: ubuntu-latest
    if: ${{ needs.fetch-release.outputs.releaseVersion }} == 'aaa'
    needs: fetch-release
    env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14

    - name: Install dependencies
      run: npm install
      working-directory: scripts

    - name: Fetch variables
      working-directory: scripts
      run: |
        CHANGELOG_URL=$(node changelog-url.js ${{ inputs.item-id }})
        echo "CHANGELOG_URL=${CHANGELOG_URL}" >> "$GITHUB_ENV"
        echo "releaseVersion:[${{ needs.fetch-release.outputs.releaseVersion }}]"

    - name: Update Release
      working-directory: scripts
      run: |
        node update-release.js ${{ inputs.item-id }} ${{ needs.fetch-release.outputs.releaseVersion }} ${{ needs.fetch-release.outputs.releaseDate }}

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v6.0.2
      with:
        title: "New ${{ inputs.item-id }} release"
        commit-message: "New ${{ inputs.item-id }} release"
        branch: "${{ inputs.item-id }}/new-release"
        add-paths: "items/*.json"
        reviewers: "${{ env.ASSIGNEE }}"
        body: ${{ env.CHANGELOG_URL }}

  tweet-release:
    runs-on: ubuntu-latest
    if: ${{ needs.fetch-release.outputs.releaseVersion }} != ''
    environment: production
    needs: fetch-release
    env:
      TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
      TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
      TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
      TWITTER_API_KEY_SECRET: ${{ secrets.TWITTER_API_KEY_SECRET }}
      TWITTER_BEARER_TOKEN: ${{ secrets.TWITTER_BEARER_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch variables
        working-directory: scripts
        run: |
          MESSAGE=$(node tweet-message.js ${{ inputs.item-id }} ${{ needs.fetch-release.outputs.releaseVersion }})
          echo "MESSAGE=${MESSAGE}" >> "$GITHUB_ENV"
          echo "Message to tweet:"
          echo "$MESSAGE"

      - name: Install Python
        run: |
          python3 -m venv venv
          source venv/bin/activate

      - name: Install Dependencies
        working-directory: scripts
        run: pip install -r requirements.txt

      # - name: Tweet Release
      #   working-directory: scripts
      #   run: python3 twitter.py "${{ env.MESSAGE }}"